import pathlib
import re
import sys
from xml.dom import minidom


DESIGN_PATH = (
    pathlib.Path(__file__)
    .parent # scripts
    .parent # sebec
    .parent # root
    / "design"
)

COLOR_MODULE_PATH = (
    pathlib.Path(__file__)
    .parent # scripts
    .parent # sebec
    / "color.py"
)

TEMPLATE = '''"""Autogenerated via `poetry run update-colors {source_filename}`."""
import enum


__all__ = ["Color"]


class Color(enum.StrEnum):
{members}
'''


def main():
    source_path = DESIGN_PATH / sys.argv[1]
    colors = []

    with open(source_path) as svg_file:
        doc = minidom.parse(svg_file)
        for element in doc.getElementsByTagName("*"):
            style = element.attributes.get("style")
            if not style: continue

            match = re.match("fill:(#[a-fA-F0-9]{3,6});", style.value)
            if not match: continue

            colors.append({
                "name": element.attributes["id"].value.lower(),
                "code": match.group(1),
            })

        doc.unlink()

    distinct_names = set(color["name"] for color in colors)

    assert len(distinct_names) == len(colors), "Duplicate color names found"

    with open(COLOR_MODULE_PATH, "w") as py_file:
        members = [f'    {color["name"]} = "{color["code"]}"' for color in colors]
        joined = "\n".join(sorted(members))
        py_file.write(TEMPLATE.format(members=joined, source_filename=sys.argv[1]))


if __name__ == "__main__":
    main()
